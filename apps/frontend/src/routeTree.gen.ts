/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as FurnituresRouteImport } from './routes/furnitures'
import { Route as IndexRouteImport } from './routes/index'
import { Route as MaterialsMaterialIdRouteImport } from './routes/materials/$materialId'
import { Route as FurnituresAddRouteImport } from './routes/furnitures/add'

const FurnituresRoute = FurnituresRouteImport.update({
  id: '/furnitures',
  path: '/furnitures',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const MaterialsMaterialIdRoute = MaterialsMaterialIdRouteImport.update({
  id: '/materials/$materialId',
  path: '/materials/$materialId',
  getParentRoute: () => rootRouteImport,
} as any)
const FurnituresAddRoute = FurnituresAddRouteImport.update({
  id: '/add',
  path: '/add',
  getParentRoute: () => FurnituresRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/furnitures': typeof FurnituresRouteWithChildren
  '/furnitures/add': typeof FurnituresAddRoute
  '/materials/$materialId': typeof MaterialsMaterialIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/furnitures': typeof FurnituresRouteWithChildren
  '/furnitures/add': typeof FurnituresAddRoute
  '/materials/$materialId': typeof MaterialsMaterialIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/furnitures': typeof FurnituresRouteWithChildren
  '/furnitures/add': typeof FurnituresAddRoute
  '/materials/$materialId': typeof MaterialsMaterialIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/furnitures' | '/furnitures/add' | '/materials/$materialId'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/furnitures' | '/furnitures/add' | '/materials/$materialId'
  id:
    | '__root__'
    | '/'
    | '/furnitures'
    | '/furnitures/add'
    | '/materials/$materialId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  FurnituresRoute: typeof FurnituresRouteWithChildren
  MaterialsMaterialIdRoute: typeof MaterialsMaterialIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/furnitures': {
      id: '/furnitures'
      path: '/furnitures'
      fullPath: '/furnitures'
      preLoaderRoute: typeof FurnituresRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/materials/$materialId': {
      id: '/materials/$materialId'
      path: '/materials/$materialId'
      fullPath: '/materials/$materialId'
      preLoaderRoute: typeof MaterialsMaterialIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/furnitures/add': {
      id: '/furnitures/add'
      path: '/add'
      fullPath: '/furnitures/add'
      preLoaderRoute: typeof FurnituresAddRouteImport
      parentRoute: typeof FurnituresRoute
    }
  }
}

interface FurnituresRouteChildren {
  FurnituresAddRoute: typeof FurnituresAddRoute
}

const FurnituresRouteChildren: FurnituresRouteChildren = {
  FurnituresAddRoute: FurnituresAddRoute,
}

const FurnituresRouteWithChildren = FurnituresRoute._addFileChildren(
  FurnituresRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  FurnituresRoute: FurnituresRouteWithChildren,
  MaterialsMaterialIdRoute: MaterialsMaterialIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
